top z√°loha 

<!DOCTYPE html>
<html lang="cs">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Project_73 - Grid Development [v2.0]</title>
  <script src="https://cdn.tailwindcss.com"></script>
  
  <!-- Firebase SDK v10 -->
  <script type="module">
    // Firebase imports
    import { initializeApp } from 'https://www.gstatic.com/firebasejs/10.12.0/firebase-app.js';
    import { getFirestore, collection, doc, setDoc, getDoc, updateDoc, onSnapshot, serverTimestamp, increment, query, where, orderBy, limit, getDocs, addDoc } from 'https://www.gstatic.com/firebasejs/10.12.0/firebase-firestore.js';
    import { getStorage, ref, uploadBytes, getDownloadURL, uploadBytesResumable } from 'https://www.gstatic.com/firebasejs/10.12.0/firebase-storage.js';
    import { getAuth, signInAnonymously, onAuthStateChanged } from 'https://www.gstatic.com/firebasejs/10.12.0/firebase-auth.js';

    // Firebase konfigurace
    const firebaseConfig = {
      apiKey: "AIzaSyDdKzUd-QVHEdHMGl3kbuAKk4p6CjgkgzQ",
      authDomain: "central-asset-storage.firebaseapp.com",
      projectId: "central-asset-storage",
      storageBucket: "central-asset-storage.appspot.com",
      messagingSenderId: "907874309868",
      appId: "1:907874309868:web:5354ee69d6212f3d9937c9"
    };

    // Inicializace Firebase
    const app = initializeApp(firebaseConfig);
    const db = getFirestore(app);
    const storage = getStorage(app, 'gs://central-asset-storage.firebasestorage.app');
    const auth = getAuth(app);

    // Vystaven√≠ Firebase objekt≈Ø glob√°lnƒõ pro snadn√Ω p≈ô√≠stup
    window.firebase = { 
      db, storage, auth, 
      collection, doc, setDoc, getDoc, updateDoc, onSnapshot, serverTimestamp, increment, addDoc,
      query, where, orderBy, limit, getDocs,
      ref, uploadBytes, getDownloadURL, uploadBytesResumable,
      signInAnonymously, onAuthStateChanged
    };
    
    console.log('üß™ Project_73 v2.0 - Firebase SDK loaded and initialized');
  </script>
  
  <style>
    /* Styly z≈Øst√°vaj√≠ stejn√© jako v p≈Øvodn√≠m souboru */
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap');
    :root { --cell-min: 133px; }
    body{
      font-family: 'Inter', sans-serif;
      background:#f0f4f8; margin:0; padding:24px; display:flex; flex-direction:column; gap:12px;
    }
    .row{
      display:grid;
      grid-template-columns: repeat(15, minmax(var(--cell-min), 1fr));
      gap: 12px;
      padding: 0 8px;
      overflow-x: auto;
    }
    @supports (-webkit-overflow-scrolling: touch) {
      .row { -webkit-overflow-scrolling: touch; }
    }
    .box{
      height:170px;
      background:#e2e8f0;
      border-radius:8px;
      display:flex; align-items:center; justify-content:center;
      position: relative;
      color:#4b5563;
      box-shadow:0 4px 6px rgba(0,0,0,.1);
      transition: transform .2s, box-shadow .2s, background 0.2s, opacity 0.2s;
      text-align:center; white-space:nowrap;
      -webkit-user-select: none;
      -ms-user-select: none;
      user-select: none;
      background-size: cover;
      background-position: center;
      cursor: grab;
    }
    /* --- Performance: izolace layoutu/paint + deklarace budouc√≠ transformace --- */
  /* Performance tuning (rev2) */
  /* Box: pouze paint containment (layout containment m≈Ø≈æe fragmentovat grid a zvy≈°ovat n√°klady) */
  .box { contain: paint; will-change: transform; }
  /* ≈ò√°dky: virtualizace mimo viewport ‚Äì prohl√≠≈æeƒç m≈Ø≈æe odlo≈æit vykreslen√≠ */
  .row { content-visibility: auto; contain-intrinsic-size: 1px 190px; }
  body.dnd-active .box:hover { transform: none !important; }
  body.dnd-active .box * { pointer-events: none; }
    /* T≈ô√≠da .box.ghost byla odstranƒõna, je nahrazena modernƒõj≈°√≠m p≈ô√≠stupem */
    .box:hover,
    .box:active,
    .box:focus {
      transform: none !important;
      scale: 1 !important;
    }
    .box.dragging { visibility: hidden; z-index: 10; }
    .box.dragover { outline: 2px solid #60a5fa; outline-offset: -2px; transform:none; }
    .box.loading {
      background: #d1d5db; /* Neutr√°ln√≠ ≈°ed√° */
      display: flex;
      align-items: center;
      justify-content: center;
    }
    .box.loading::after {
      content: '';
      width: 24px;
      height: 24px;
      border: 3px solid rgba(255,255,255,0.5);
      border-top-color: #fff;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    .box-link-badge {
      position: absolute;
      bottom: 8px;
      left: 50%;
      transform: translateX(-50%);
      background: rgba(37,99,235,0.85);
      color: #fff;
      padding: 4px 10px;
      border-radius: 9999px;
      font-size: 12px;
      font-weight: 500;
      pointer-events: auto;
      cursor: pointer;
      box-shadow: 0 2px 6px rgba(0,0,0,0.2);
    }
    @media (min-width: 1600px){
      .box{ height:190px; }
    }
    #p73-status-banner { position: fixed; left: 16px; right: 16px; top: 16px; z-index: 9999; display:flex; justify-content:center; pointer-events:none; }
    .p73-banner { pointer-events:auto; background: rgba(0,0,0,0.8); color: white; padding: 8px 12px; border-radius: 6px; font-size:13px; box-shadow: 0 6px 18px rgba(0,0,0,0.2); }
    .p73-banner.error { background: #b91c1c; }
    #sidebar { position: fixed; left: -280px; top: 0; width: 280px; height: 100%; background: white; box-shadow: 2px 0 10px rgba(0,0,0,0.1); z-index: 1000; transition: left 0.3s ease; overflow-y: auto; padding: 20px; }
    #sidebar.active { left: 0; }
    #sidebar-toggle { position: fixed; left: 20px; top: 20px; z-index: 1001; background: white; border: none; border-radius: 50%; width: 40px; height: 40px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); cursor: pointer; display: flex; align-items: center; justify-content: center; transition: all 0.2s; }
    #sidebar-toggle:hover { transform: scale(1.05); box-shadow: 0 2px 15px rgba(0,0,0,0.15); }
    #sidebar-toggle svg { width: 24px; height: 24px; transition: transform 0.3s; }
    #sidebar-toggle.active svg { transform: rotate(180deg); }
    .sidebar-header { font-weight: 600; font-size: 18px; margin-bottom: 15px; padding-bottom: 10px; border-bottom: 1px solid #f0f0f0; }
    .sidebar-section { margin-bottom: 20px; padding-bottom: 15px; border-bottom: 1px solid #f0f0f0; }
    .color-palettes { display: flex; flex-wrap: wrap; gap: 8px; margin-top: 10px; }
    .color-palette { width: 48px; height: 48px; border-radius: 8px; cursor: pointer; transition: transform 0.2s, box-shadow 0.2s; position: relative; }
    .color-palette:hover { transform: scale(1.05); box-shadow: 0 4px 8px rgba(0,0,0,0.15); }
    .color-palette.active { box-shadow: 0 0 0 3px #3b82f6, 0 4px 8px rgba(0,0,0,0.15); }
    .color-palette-name { position: absolute; bottom: -20px; left: 0; right: 0; text-align: center; font-size: 10px; color: #666; }
    .workspace-panels { display: flex; flex-direction: column; gap: 12px; margin-top: 10px; }
    .workspace-panel { position: relative; width: 100%; height: 80px; border-radius: 8px; cursor: pointer; transition: transform 0.2s, box-shadow 0.2s; overflow: hidden; background-size: cover; background-position: center; display: flex; align-items: center; justify-content: center; border: 1px solid #e5e7eb; }
    .workspace-panel:hover { transform: scale(1.02); box-shadow: 0 4px 8px rgba(0,0,0,0.15); }
    .workspace-panel.active { box-shadow: 0 0 0 3px #3b82f6, 0 4px 8px rgba(0,0,0,0.15); }
    .workspace-panel-name { position: absolute; bottom: 0; left: 0; right: 0; background: rgba(0,0,0,0.6); color: white; padding: 4px 8px; font-size: 12px; text-align: center; }
    .workspace-panel-preview { display: grid; grid-template-columns: repeat(4, 1fr); grid-template-rows: repeat(2, 1fr); gap: 2px; width: 90%; height: 60px; }
    .preview-box { background: #e2e8f0; border-radius: 2px; }
    #detail-panel { position: fixed; right: -560px; top: 0; width: 560px; height: 100%; background: white; box-shadow: -2px 0 10px rgba(0,0,0,0.1); z-index: 1000; transition: right 0.3s ease; overflow-y: auto; padding: 20px; }
    #detail-panel.active { right: 0; }
    .detail-panel-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; padding-bottom: 15px; border-bottom: 1px solid #f0f0f0; }
    .detail-panel-header h2 { font-weight: 600; font-size: 20px; margin: 0; }
    .detail-panel-close { background: none; border: none; cursor: pointer; padding: 5px; color: #888; transition: color 0.2s; }
    .detail-panel-close:hover { color: #333; }
    .detail-section { margin-bottom: 20px; }
    .detail-preview { width: 100%; height: 200px; border-radius: 8px; margin-bottom: 15px; background-size: cover; background-position: center; background-color: #f0f4f8; display: flex; align-items: center; justify-content: center; overflow: hidden; }
    .nav-icons { position: absolute; background: white; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.15); padding: 8px; display: flex; gap: 10px; z-index: 100; opacity: 0; transform: scale(0.8); transition: all 0.2s; pointer-events: none; }
    .nav-icons.active { opacity: 1; transform: scale(1); pointer-events: all; }
    .nav-icon { width: 40px; height: 40px; display: flex; align-items: center; justify-content: center; background: #f5f5f5; border-radius: 6px; cursor: pointer; transition: all 0.2s; }
    .nav-icon:hover { background: #e0f2fe; transform: translateY(-2px); }
    .nav-icon svg { width: 20px; height: 20px; color: #444; }
    .workspace-loading { position: fixed; top: 0; left: 0; right: 0; bottom: 0; background: rgba(255,255,255,0.7); display: flex; align-items: center; justify-content: center; z-index: 2000; opacity: 0; pointer-events: none; transition: opacity 0.2s; }
    .workspace-loading.active { opacity: 1; pointer-events: all; }
    .workspace-loading-spinner { width: 40px; height: 40px; border: 4px solid rgba(59, 130, 246, 0.3); border-radius: 50%; border-top-color: #3b82f6; animation: spin 1s linear infinite; }
    @keyframes spin { to { transform: rotate(360deg); } }
  </style>
</head>
<body>
  <div id="p73-status-banner"></div>
  
  <button id="sidebar-toggle" aria-label="Otev≈ô√≠t/zav≈ô√≠t menu">
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="3" y1="12" x2="21" y2="12"></line><line x1="3" y1="6" x2="21" y2="6"></line><line x1="3" y1="18" x2="21" y2="18"></line></svg>
  </button>
  
  <div id="sidebar">
    <div class="sidebar-header">Project_73 Menu</div>
    
    <div class="sidebar-section">
      <h3 class="font-medium mb-2">Pracovn√≠ plochy</h3>
      <p class="text-xs text-gray-500 mb-2">Klikni na plochu a pak na box v m≈ô√≠≈æce</p>
      <div class="workspace-panels">
        <!-- Panely budou dynamicky generov√°ny JavaScriptem -->
      </div>
      <button id="add-workspace-btn" class="mt-4 w-full px-3 py-2 bg-blue-500 text-white rounded text-sm hover:bg-blue-600 transition">P≈ôidat nov√Ω projekt</button>
    </div>
    <div class="sidebar-section">
      <h3 class="font-medium mb-2">Barevn√© plochy</h3>
      <p class="text-xs text-gray-500 mb-2">Klikni na barvu a pak na box v m≈ô√≠≈æce</p>
      <div class="color-palettes">
        <div class="color-palette" style="background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);" data-color="blue" title="Modr√Ω gradient"><span class="color-palette-name">Modr√°</span></div>
        <div class="color-palette" style="background: linear-gradient(135deg, #f3e5f5 0%, #ce93d8 100%);" data-color="purple" title="Fialov√Ω gradient"><span class="color-palette-name">Fialov√°</span></div>
        <div class="color-palette" style="background: linear-gradient(135deg, #f1f8e9 0%, #aed581 100%);" data-color="green" title="Zelen√Ω gradient"><span class="color-palette-name">Zelen√°</span></div>
        <div class="color-palette" style="background: linear-gradient(135deg, #fff3e0 0%, #ffcc80 100%);" data-color="orange" title="Oran≈æov√Ω gradient"><span class="color-palette-name">Oran≈æov√°</span></div>
        <div class="color-palette" style="background: linear-gradient(135deg, #fce4ec 0%, #f48fb1 100%);" data-color="pink" title="R≈Ø≈æov√Ω gradient"><span class="color-palette-name">R≈Ø≈æov√°</span></div>
      </div>
    </div>
    <div class="sidebar-section">
      <h3 class="font-medium mb-2">Nastaven√≠ m≈ô√≠≈æky</h3>
      <div class="flex flex-col gap-2">
  <button id="clear-workspace-btn" class="px-3 py-2 bg-blue-100 hover:bg-blue-200 rounded text-sm">Vyƒçistit v≈°echny boxy</button>
        <button class="px-3 py-2 bg-blue-100 hover:bg-blue-200 rounded text-sm">Export dat</button>
      </div>
    </div>
    <div class="sidebar-section">
      <h3 class="font-medium mb-2">Informace o projektu</h3>
      <div class="text-sm">
        <p>Session ID: <span id="session-id-display">naƒç√≠t√°n√≠...</span></p>
        <p>Stav: <span id="firebase-status">naƒç√≠t√°n√≠...</span></p>
        <p>ƒåas naƒçten√≠: <span id="load-time-display">- ms</span></p>
      </div>
    </div>
    <div class="sidebar-section">
      <h3 class="font-medium mb-2">Statistiky</h3>
      <div class="text-sm"><p>Celkem box≈Ø: <span id="total-boxes">105</span></p><p>Vyplnƒõno: <span id="filled-boxes">0</span></p></div>
    </div>
    <div class="sidebar-section" id="archive-section">
      <h3 class="font-medium mb-2 flex items-center justify-between">
        <span>Smazan√© (archiv)</span>
        <button id="archive-refresh" class="text-xs px-2 py-1 bg-gray-100 hover:bg-gray-200 rounded">‚Üª</button>
      </h3>
      <div class="text-xs text-gray-500 mb-2">Posledn√≠ smazan√© polo≈æky (3 dny)</div>
      <div id="archive-list" class="flex flex-col gap-2 max-h-48 overflow-auto text-xs"></div>
    </div>
    <div class="sidebar-section" id="deferred-section">
      <h3 class="font-medium mb-2 flex items-center justify-between">
        <span>Odlo≈æen√© √∫koly</span>
        <button id="deferred-add" class="text-xs px-2 py-1 bg-blue-500 text-white rounded hover:bg-blue-600">+</button>
      </h3>
      <div class="text-xs text-gray-500 mb-2">Rychl√© pozn√°mky k pozdƒõj≈°√≠mu ≈ôe≈°en√≠</div>
      <div class="flex gap-2 mb-2">
        <input id="deferred-title" type="text" placeholder="Nov√Ω √∫kol..." class="flex-1 px-2 py-1 border rounded text-sm" />
        <button id="deferred-save" class="text-xs px-3 py-1 bg-green-500 text-white rounded hover:bg-green-600">Ulo≈æit</button>
      </div>
      <div id="deferred-list" class="flex flex-col gap-2 max-h-56 overflow-auto text-xs"></div>
    </div>
  </div>
  
  <div id="detail-panel">
    <div class="detail-panel-header">
      <h2>Detail boxu <span id="box-position"></span></h2>
      <button class="detail-panel-close" aria-label="Zav≈ô√≠t detail"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg></button>
    </div>
    <div class="detail-section"><div class="detail-preview" id="box-preview"></div></div>
    <div class="detail-section">
      <h3 class="font-medium mb-2">Popis</h3>
      <textarea id="box-description" class="w-full p-3 border border-gray-300 rounded-lg" rows="4" placeholder="Zadejte popis tohoto boxu..."></textarea>
      <button id="save-description" class="mt-2 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition">Ulo≈æit popis</button>
    </div>
    <div class="detail-section">
      <h3 class="font-medium mb-2">Vlastnosti</h3>
      <div class="grid grid-cols-2 gap-2">
        <div class="p-3 bg-gray-100 rounded-lg"><div class="text-xs text-gray-500">Typ</div><div id="box-type">Standardn√≠</div></div>
        <div class="p-3 bg-gray-100 rounded-lg"><div class="text-xs text-gray-500">Vytvo≈ôeno</div><div id="box-created">-</div></div>
        <div class="p-3 bg-gray-100 rounded-lg"><div class="text-xs text-gray-500">Posledn√≠ √∫prava</div><div id="box-updated">-</div></div>
        <div class="p-3 bg-gray-100 rounded-lg"><div class="text-xs text-gray-500">Autor</div><div id="box-author">-</div></div>
      </div>
    </div>
  </div>
  
  <div class="nav-icons" id="nav-icons">
    <div class="nav-icon" data-action="rename" title="P≈ôejmenovat text">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-pencil"><path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"/><path d="m15 5 4 4"/></svg>
    </div>
    <div class="nav-icon" data-action="link" title="P≈ôidat odkaz">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"></path><path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"></path></svg>
    </div>
    <div class="nav-icon" data-action="color" title="Zmƒõnit barvu">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M12 2.69l5.66 5.66a8 8 0 1 1-11.31 0L12 2.69z"></path></svg>
    </div>
    <div class="nav-icon" data-action="delete" title="Smazat obsah (nebo kl√°vesa Del)">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="3 6 5 6 21 6"></polyline><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path></svg>
    </div>
  </div>
  
  <div class="workspace-loading" id="workspace-loading"><div class="workspace-loading-spinner"></div></div>

  <!-- Vlastn√≠ (rychl√Ω) n√°hled pro p≈ôetahov√°n√≠ -->
  <div id="drag-preview" style="position: absolute; top: -1000px; background: #3b82f6; color: white; padding: 8px 12px; border-radius: 8px; font-size: 14px; font-weight: 500; box-shadow: 0 4px 12px rgba(0,0,0,0.2); z-index: 9999;">P≈ôesunuji...</div>

  <!-- NOV√ù KONTEJNER PRO M≈ò√ç≈ΩKU -->
  <div id="grid-container"></div>
  
  <script>
    // =================================================================================
    // --- 1. KONFIGURACE A GLOB√ÅLN√ç STAV ---
    // =================================================================================
    let activeBox = null;
    let currentUser = null;
    let isEditingText = false;
    let isFirebaseReady = false;
    let uploadQueue = [];
    let currentBoxDetails = null;
    let unsubscribeListener = null; 
    let dragSource = null;
  let lastDragOverEl = null; // pro ƒçi≈°tƒõn√≠ .dragover
  let lastDragSwapPositions = null; // uchov√°n√≠ posledn√≠ch swapovan√Ωch pozic pro integritu
  // Cache aktu√°ln√≠ho stavu gridu pro diff rendering
  let gridDataCache = {}; // { 'r-c': { ..boxData } }
  // Debug p≈ôep√≠naƒç pro logov√°n√≠ diff operac√≠
  const DEBUG_DIFF = false;
  let _rtUnsub = null; // realtime subscription reference (pauza bƒõhem drag)

    let currentWorkspace = null;
    let sessionId = null;
    let gridDocRef = null;
    let userWorkspacesDocRef = null;

    let workspaceConfigs = {};
    // --- Auto-hide konfigurace pro plovouc√≠ li≈°tu n√°stroj≈Ø (nav-icons) ---
    const NAV_ICONS_AUTOHIDE_MS = 4000; // ƒças neaktivity (ms), po kter√©m se li≈°ta skryje
    let navIconsHideTimer = null;

  // --- Archivace (soft-delete) konfigurace ---
  const ARCHIVE_COLLECTION = 'project73_archives';
  const ARCHIVE_RETENTION_DAYS = 3; // Poƒçet dn√≠ pro obnovu (zmƒõnƒõno z 7)

    function cancelNavIconsAutohide(){
      if (navIconsHideTimer){
        clearTimeout(navIconsHideTimer);
        navIconsHideTimer = null;
      }
    }

    function startNavIconsAutohide(){
      cancelNavIconsAutohide();
      const el = document.getElementById('nav-icons');
      if (!el || !el.classList.contains('active')) return;
      navIconsHideTimer = setTimeout(() => {
        el.classList.remove('active');
        navIconsHideTimer = null;
      }, NAV_ICONS_AUTOHIDE_MS);
    }
    // Pomocn√° funkce: zji≈°tƒõn√≠ zda box m√° nƒõjak√Ω obsah (obr√°zek, text, barvu, odkaz)
    function boxHasContent(box){
      if(!box) return false;
      const hasBgImage = box.style.backgroundImage && box.style.backgroundImage !== 'none';
      const hasSpanText = !!box.querySelector('span');
      const hasLink = !!box.dataset.linkUrl;
      const hasColorBg = box.style.background && box.style.background !== '' && !box.style.background.includes('rgba(0, 0, 0, 0)');
      return hasBgImage || hasSpanText || hasLink || hasColorBg;
    }

    // =================================================================================
    // --- 2. DATOV√â OPERACE (FIREBASE & STORAGE) ---
    // =================================================================================
    function getDefaultWorkspaces() {
      return {
        workspace1: { collection: 'project73-sessions', name: "Plocha 1" },
        workspace2: { collection: 'project73-workspace2', name: "Plocha 2" },
        workspace3: { collection: 'project73-workspace3', name: "Plocha 3" },
        workspace4: { collection: 'project73-workspace4', name: "Plocha 4" },
        workspace5: { collection: 'project73-workspace5', name: "Vlastn√≠ plocha" }
      };
    }

    function getBrowserFingerprint() {
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      ctx.textBaseline = 'top';
      ctx.font = '14px Arial';
      ctx.fillText('Browser fingerprint', 2, 2);
      
      const components = [
        navigator.userAgent || '', navigator.language || '',
        screen.width + 'x' + screen.height, screen.colorDepth || '',
        new Date().getTimezoneOffset(), canvas.toDataURL(),
        navigator.platform || '', navigator.cookieEnabled,
        typeof window.localStorage !== 'undefined', typeof window.sessionStorage !== 'undefined'
      ];
      
      const fingerprint = btoa(components.join('|')).replace(/[+=\/]/g, '').substring(0, 16);
      return fingerprint;
    }

    async function findSessionByFingerprint(fingerprint, collectionName) {
      const { db, collection, query, where, limit, getDocs } = window.firebase;
      try {
        const q = query(collection(db, collectionName), where('browserFingerprint', '==', fingerprint), limit(5));
        const querySnapshot = await getDocs(q);
        if (querySnapshot.empty) return null;

        const sessions = querySnapshot.docs.map(d => ({ id: d.id, data: d.data() }));
        let bestSession = null;
        let maxData = -1;

        for (const session of sessions) {
          const dataCount = session.data.gridData ? Object.keys(session.data.gridData).length : 0;
          if (dataCount > maxData) {
            maxData = dataCount;
            bestSession = session;
          }
        }
        return bestSession;
      } catch (error) {
        console.error(`‚ùå Error finding session by fingerprint in ${collectionName}:`, error);
        return null;
      }
    }

    async function createNewSession(workspaceId) {
        const config = workspaceConfigs[workspaceId];
        const { db, doc, setDoc, serverTimestamp } = window.firebase;
        const fingerprint = getBrowserFingerprint();
        const userId = currentUser.uid;
        
        const newSessionId = `${workspaceId}_${Date.now()}_${userId.slice(0, 8)}`;
        config.sessionId = newSessionId;
        config.gridDocRef = doc(db, config.collection, config.sessionId);

        const sessionData = {
            userId, sessionId: newSessionId, workspaceId, browserFingerprint: fingerprint,
            gridData: {},
            stats: { totalBoxes: 105, filledBoxes: 0, emptyBoxes: 105, isActive: true },
            metadata: { version: "2.0", project: "Project_73", workspace: workspaceId, gridSize: "15x7" },
            created: serverTimestamp(),
            lastModified: serverTimestamp(),
            lastAccessed: serverTimestamp()
        };

        await setDoc(config.gridDocRef, sessionData);
        console.log(`‚úÖ Created new session for ${workspaceId}:`, newSessionId);
        return { sessionId: newSessionId, gridDocRef: config.gridDocRef };
    }

    async function updateBoxDataInFirestore(position, dataToSave) {
        if (!gridDocRef) return;
        const { updateDoc, getDoc, serverTimestamp, doc: fbDoc } = window.firebase;

        if (dataToSave === null) {
            const docSnap = await getDoc(gridDocRef);
            if (docSnap.exists()) {
                const updatedGridData = { ...docSnap.data().gridData };
                delete updatedGridData[position];
                await updateDoc(gridDocRef, {
                    gridData: updatedGridData,
                    'lastModified': serverTimestamp()
                });
            }
            return;
        }

        const docSnap = await getDoc(gridDocRef);
        if (!docSnap.exists()) return;

        const gridData = docSnap.data().gridData || {};
        const existingData = gridData[position] || {};
        const mergedData = { ...existingData, ...dataToSave, updatedAt: serverTimestamp() };
        
        await updateDoc(gridDocRef, {
            [`gridData.${position}`]: mergedData,
            'lastModified': serverTimestamp()
        });
    }

    async function swapBoxDataInFirestore(pos1, pos2) {
        if (!gridDocRef) return false;
        const { getDoc, updateDoc, serverTimestamp } = window.firebase;
        const docSnap = await getDoc(gridDocRef);
        if (!docSnap.exists()) return false;
        
        const gridData = docSnap.data().gridData || {};
        const data1 = gridData[pos1] ? { ...gridData[pos1] } : null;
        const data2 = gridData[pos2] ? { ...gridData[pos2] } : null;

        const updates = {};
        updates[`gridData.${pos1}`] = data2;
        updates[`gridData.${pos2}`] = data1;
        if(updates[`gridData.${pos1}`]) updates[`gridData.${pos1}`].updatedAt = serverTimestamp();
        if(updates[`gridData.${pos2}`]) updates[`gridData.${pos2}`].updatedAt = serverTimestamp();
        updates.lastModified = serverTimestamp();

        await updateDoc(gridDocRef, updates);
        console.log(`‚úÖ Swapped data in Firestore: ${pos1} ‚Üî ${pos2}`);
        return true;
    }

  async function archiveAndDeleteBox(position){
    if(!gridDocRef) return;
    const { getDoc, addDoc, collection, serverTimestamp } = window.firebase;
    try {
      const snap = await getDoc(gridDocRef);
      if(!snap.exists()) return;
      const gridData = snap.data().gridData || {};
      const boxData = gridData[position];
      // Pokud nen√≠ co archivovat, jen sma≈æeme (bude ≈ôe≈°it updateBoxDataInFirestore)
      if(!boxData){
        await updateBoxDataInFirestore(position, null);
        return;
      }
      const retentionMs = ARCHIVE_RETENTION_DAYS * 24 * 60 * 60 * 1000;
      try {
        await addDoc(collection(window.firebase.db, ARCHIVE_COLLECTION), {
          userId: currentUser?.uid || null,
          workspaceId: currentWorkspace,
          sessionId,
          position,
          deletedAt: serverTimestamp(),
          expiresAt: new Date(Date.now() + retentionMs), // Pro Firestore TTL (nutno povolit)
          data: boxData,
          version: '2.0'
        });
      } catch(archiveErr){
        console.error('‚ùå Archivace selhala (probƒõhne jen p≈ô√≠m√© smaz√°n√≠):', archiveErr);
      }
      await updateBoxDataInFirestore(position, null);
      console.log(`üóëÔ∏è Box ${position} archivov√°n a odstranƒõn.`);
    } catch(e){
      console.error('‚ùå archiveAndDeleteBox error:', e);
    }
  }

  async function loadArchiveList(limitCount = 20) {
    const listEl = document.getElementById('archive-list');
    if (!listEl || !currentWorkspace || !sessionId) return;
    listEl.innerHTML = '<div class="text-gray-400 animate-pulse">Naƒç√≠t√°m...</div>';
    try {
      const { db, collection, query, where, limit, getDocs } = window.firebase;
      const col = collection(db, ARCHIVE_COLLECTION);
      // Odstranƒõno orderBy('deletedAt', 'desc') z dotazu, aby se p≈ôede≈°lo chybƒõ indexu
      const q = query(
        col,
        where('workspaceId', '==', currentWorkspace),
        where('sessionId', '==', sessionId),
        limit(limitCount)
      );
      const snap = await getDocs(q);
      if (snap.empty) {
        listEl.innerHTML = '<div class="text-gray-400 italic">≈Ω√°dn√© z√°znamy</div>';
        return;
      }
      
      // Se≈ôazen√≠ dokument≈Ø na stranƒõ klienta
      const sortedDocs = snap.docs.sort((a, b) => {
        const timeA = a.data().deletedAt?.toDate() || 0;
        const timeB = b.data().deletedAt?.toDate() || 0;
        return timeB - timeA; // Sestupn√© ≈ôazen√≠
      });

      listEl.innerHTML = '';
      sortedDocs.forEach(docSnap => {
        const d = docSnap.data();
        const item = document.createElement('div');
        item.className = 'flex items-start gap-2 p-2 border rounded hover:bg-gray-50';
        const label = d.data?.text || (d.data?.colorStyle ? 'Barevn√Ω blok' : (d.data?.imageUrl ? 'Obr√°zek' : 'Obsah'));
        item.innerHTML = `
          <div class='flex-1'>
            <div class='font-medium text-[11px] leading-tight'>${d.position} ‚Äì ${label}</div>
            <div class='text-[10px] text-gray-500'>Smaz√°no: ${d.deletedAt?.toDate ? d.deletedAt.toDate().toLocaleString() : '-'}</div>
          </div>
          <div class='flex flex-col gap-1'>
            <button data-doc='${docSnap.id}' data-pos='${d.position}' class='restore-btn text-[10px] px-2 py-1 bg-blue-500 text-white rounded hover:bg-blue-600'>Obnovit</button>
          </div>`;
        listEl.appendChild(item);
      });
    } catch (e) {
      console.error('‚ùå loadArchiveList error', e);
      listEl.innerHTML = '<div class="text-red-500 text-xs">Chyba p≈ôi naƒç√≠t√°n√≠ archivu.</div>';
    }
  }

  // ================= Odlo≈æen√© √∫koly =================
  const DEFERRED_COLLECTION = 'project73_deferredTasks';
  let unsubscribeDeferred = null;

  async function addDeferredTask(title){
    if(!title || !currentWorkspace || !sessionId) return;
    try {
      const { db, collection, addDoc, serverTimestamp } = window.firebase;
      await addDoc(collection(db, DEFERRED_COLLECTION), {
        userId: currentUser?.uid || null,
        workspaceId: currentWorkspace,
        sessionId,
        title: title.trim(),
        status: 'open',
        createdAt: serverTimestamp(),
        updatedAt: serverTimestamp(),
        version: '1.0'
      });
    } catch(e){
      console.error('‚ùå addDeferredTask error', e);
      showBanner('Chyba p≈ôi ukl√°d√°n√≠ √∫kolu', 'error');
    }
  }

  async function toggleDeferredTask(docId, currentStatus){
    try {
      const { db, doc, updateDoc, serverTimestamp } = window.firebase;
      const ref = doc(db, DEFERRED_COLLECTION, docId);
      await updateDoc(ref, { status: currentStatus === 'open' ? 'done' : 'open', updatedAt: serverTimestamp() });
    } catch(e){
      console.error('‚ùå toggleDeferredTask error', e);
    }
  }

  async function dropDeferredTask(docId){
    try {
      const { db, doc, updateDoc, serverTimestamp } = window.firebase;
      const ref = doc(db, DEFERRED_COLLECTION, docId);
      await updateDoc(ref, { status: 'dropped', updatedAt: serverTimestamp() });
    } catch(e){
      console.error('‚ùå dropDeferredTask error', e);
    }
  }

  function renderDeferredTaskList(snapshot){
    const listEl = document.getElementById('deferred-list');
    if(!listEl) return;
    if (snapshot.empty){
      listEl.innerHTML = '<div class="text-gray-400 italic">≈Ω√°dn√© √∫koly</div>';
      return;
    }

    // Se≈ôazen√≠ dokument≈Ø na stranƒõ klienta, abychom se vyhnuli pot≈ôebƒõ indexu
    const sortedDocs = snapshot.docs.sort((a, b) => {
        const timeA = a.data().createdAt?.toDate() || 0;
        const timeB = b.data().createdAt?.toDate() || 0;
        return timeB - timeA; // Sestupn√© ≈ôazen√≠
    });

    listEl.innerHTML = '';
    sortedDocs.forEach(docSnap => {
      const d = docSnap.data();
      if (d.status === 'dropped') return; // skryjeme odlo≈æen√© definitivnƒõ
      const item = document.createElement('div');
      const statusColor = d.status === 'done' ? 'bg-green-500' : 'bg-amber-500';
      item.className = 'flex items-center gap-2 p-2 border rounded hover:bg-gray-50';
      item.innerHTML = `
        <button data-task-toggle='${docSnap.id}' class='w-4 h-4 rounded-full ${statusColor} focus:outline-none'></button>
        <div class='flex-1 text-[12px] ${d.status === 'done' ? 'line-through text-gray-400' : ''}'>${d.title}</div>
        <button data-task-drop='${docSnap.id}' class='text-[10px] px-2 py-1 bg-gray-200 hover:bg-gray-300 rounded'>√ó</button>
      `;
      listEl.appendChild(item);
    });
  }

  function initDeferredTasksListener(){
    if (unsubscribeDeferred) { unsubscribeDeferred(); unsubscribeDeferred = null; }
    if(!currentWorkspace || !sessionId) return;
    try {
      const { db, collection, query, where, onSnapshot, limit } = window.firebase;
      const col = collection(db, DEFERRED_COLLECTION);
      const q = query(
        col,
        where('workspaceId', '==', currentWorkspace),
        where('sessionId', '==', sessionId),
        limit(50)
      );
      unsubscribeDeferred = onSnapshot(q, (snap) => {
        renderDeferredTaskList(snap);
      }, (err) => {
        console.error('‚ùå deferredTasks listener error', err);
      });
    } catch(e){
      console.error('‚ùå initDeferredTasksListener error', e);
    }
  }

  async function restoreArchivedBox(docId, position){
    try {
      const { db, doc, getDoc, updateDoc } = window.firebase;
      const archiveDocRef = doc(db, ARCHIVE_COLLECTION, docId);
      const snap = await getDoc(archiveDocRef);
      if(!snap.exists()) return;
      const archived = snap.data();
      const data = archived.data || {};
      await updateBoxDataInFirestore(position, data);
      await updateDoc(archiveDocRef, { restored: true, restoredAt: new Date() });
      showBanner(`Obnoveno ${position}.`, 'info');
    } catch(e){
      console.error('‚ùå restoreArchivedBox error', e);
      showBanner('Chyba p≈ôi obnovƒõ.', 'error');
    } finally {
      loadArchiveList();
    }
  }

    async function uploadImageToStorage(fileOrBlob, position) {
        const { storage, ref, uploadBytesResumable, getDownloadURL } = window.firebase;
        
        const mime = (fileOrBlob.type && fileOrBlob.type.startsWith('image/')) ? fileOrBlob.type : 'image/png';
        const imageId = `img_${Date.now()}_${position}`;
        const fileExtension = mime.split('/')[1] || 'png';
        const fileName = `${imageId}.${fileExtension}`;
        const storagePath = `project73-images/${sessionId}/${fileName}`;
        const storageRef = ref(storage, storagePath);
        const metadata = { contentType: mime };

        const uploadTask = uploadBytesResumable(storageRef, fileOrBlob, metadata);
        
        return new Promise((resolve, reject) => {
            let progressStarted = false;
            const timeoutDuration = 15000; 

            const timeoutId = setTimeout(() => {
                if (!progressStarted) {
                    uploadTask.cancel(); 
                    console.error(`‚ùå Upload pro ${position} vypr≈°el po ${timeoutDuration}ms.`);
                    reject(new Error('Upload timed out'));
                }
            }, timeoutDuration);

            uploadTask.on('state_changed',
                (snapshot) => {
                  const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                  if (snapshot.bytesTransferred > 0 && !progressStarted) {
                      progressStarted = true;
                      clearTimeout(timeoutId); 
                  }
                }, 
                (error) => { 
                    clearTimeout(timeoutId); 
                    console.error(`‚ùå Upload pro ${position} selhal:`, error.code, error.message);
                    
                    switch (error.code) {
                        case 'storage/unauthorized':
                            showBanner("Chyba: Nedostateƒçn√° opr√°vnƒõn√≠ pro nahr√°n√≠ souboru.", "error");
                            break;
                        case 'storage/canceled':
                            if (!progressStarted) showBanner("Nahr√°v√°n√≠ trv√° p≈ô√≠li≈° dlouho.", "error");
                            break;
                        default:
                            showBanner("Nezn√°m√° chyba p≈ôi nahr√°v√°n√≠.", "error");
                            break;
                    }
                    reject(error); 
                },
                async () => {
                    clearTimeout(timeoutId); 
                    try {
                        const downloadURL = await getDownloadURL(uploadTask.snapshot.ref);
                        console.log(`‚úÖ Soubor pro ${position} nahr√°n:`, downloadURL);
                        resolve({ url: downloadURL, id: imageId, fileName });
                    } catch(e) {
                        console.error(`‚ùå Chyba p≈ôi z√≠sk√°v√°n√≠ URL pro ${position}:`, e);
                        reject(e);
                    }
                }
            );
        });
    }

    async function processUploadQueue() {
        if (!isFirebaseReady || uploadQueue.length === 0) return;
        
        while (uploadQueue.length > 0) {
            const { blob, position, localUrl } = uploadQueue.shift();
            try {
                const imageData = await uploadImageToStorage(blob, position);

                const box = document.querySelector(`[data-position="${position}"]`);
                if (box && box.style.backgroundImage.includes(localUrl)) {
                    box.style.backgroundImage = `url(${imageData.url})`;
                }

                await updateBoxDataInFirestore(position, {
                    hasImage: true, imageUrl: imageData.url, imageId: imageData.id,
                    hasText: false, text: '', hasColor: false
                });
                console.log(`‚úÖ Queued image uploaded and saved for ${position}`);
            } catch (error) {
                console.error(`‚ùå Failed to process upload queue for ${position}:`, error);
                const box = document.querySelector(`[data-position="${position}"]`);
                if (box) box.style.outline = '2px solid red';
            }
        }
    }

  // ================================================================
  // Helper: Komprese / resize obr√°zku na klientu p≈ôed uploadem
  // - Zachov√° typ JPEG/PNG, ale vƒõt≈°√≠ PNG p≈ôev√°d√≠ na JPEG kv≈Øli √∫spo≈ôe
  // - maxWidth / maxHeight: omezen√≠ del≈°√≠ hrany
  // - quality: 0..1 (pou≈æito jen pro JPEG/WebP)
  // Vrac√≠ Promise<Blob>
  async function compressImageIfNeeded(file, { maxWidth = 1600, maxHeight = 1600, quality = 0.85 } = {}) {
    if (!(file instanceof Blob)) return file;
    // Pokud je soubor men≈°√≠ ne≈æ ~600KB, ne≈ôe≈°√≠me (rychlej≈°√≠)
    if (file.size < 600 * 1024) return file;
    const originalType = file.type || 'image/jpeg';
    const convertToJpeg = !/\b(jpeg|jpg|webp)\b/i.test(originalType);

    const arrayBuf = await file.arrayBuffer();
    const blobUrl = URL.createObjectURL(new Blob([arrayBuf]));
    const img = await new Promise((res, rej) => {
      const i = new Image();
      i.onload = () => res(i);
      i.onerror = rej;
      i.src = blobUrl;
    });
    URL.revokeObjectURL(blobUrl);

    let { width, height } = img;
    const ratio = Math.min(maxWidth / width, maxHeight / height, 1);
    if (ratio < 1) { width = Math.round(width * ratio); height = Math.round(height * ratio); }

    const canvas = document.createElement('canvas');
    canvas.width = width; canvas.height = height;
    const ctx = canvas.getContext('2d');
    ctx.drawImage(img, 0, 0, width, height);

    const mime = convertToJpeg ? 'image/jpeg' : (originalType === 'image/png' && file.size > 2*1024*1024 ? 'image/jpeg' : originalType);

    const blobCompressed = await new Promise(resolve => canvas.toBlob(b => resolve(b || file), mime, quality));
    // Pokud komprese nepomohla (vƒõt≈°√≠ ne≈æ origin√°l), vra≈• origin√°l
    if (blobCompressed.size >= file.size) return file;
    return blobCompressed;
  }
    
    // =================================================================================
    // --- 3. MANIPULACE S UI (DOM) ---
    // =================================================================================
    function swapBoxElementsInDOM(box1, box2) {
    const pos1 = box1.dataset.position;
    const pos2 = box2.dataset.position;

    const content1 = {
      innerHTML: box1.innerHTML,
      backgroundImage: box1.style.backgroundImage,
      background: box1.style.background,
      linkUrl: box1.dataset.linkUrl,
      linkText: box1.dataset.linkText
    };
    const content2 = {
      innerHTML: box2.innerHTML,
      backgroundImage: box2.style.backgroundImage,
      background: box2.style.background,
      linkUrl: box2.dataset.linkUrl,
      linkText: box2.dataset.linkText
    };

    // Vyƒçistit p≈Øvodn√≠ obsah (neztr√°c√≠me referenci na elementy)
    box1.innerHTML = ''; box1.style.backgroundImage = 'none'; box1.style.background = '';
    box2.innerHTML = ''; box2.style.backgroundImage = 'none'; box2.style.background = '';

    // Aplikace prohozen√©ho obsahu
    box1.innerHTML = content2.innerHTML;
    box1.style.backgroundImage = content2.backgroundImage;
    box1.style.background = content2.background;
    box1.dataset.linkUrl = content2.linkUrl || '';
    box1.dataset.linkText = content2.linkText || '';

    box2.innerHTML = content1.innerHTML;
    box2.style.backgroundImage = content1.backgroundImage;
    box2.style.background = content1.background;
    box2.dataset.linkUrl = content1.linkUrl || '';
    box2.dataset.linkText = content1.linkText || '';

    // Optimistick√° aktualizace cache (aby diff re-render nesmazal lok√°ln√≠ swap)
    const cache1 = gridDataCache[pos1];
    const cache2 = gridDataCache[pos2];
    gridDataCache[pos1] = cache2 ? { ...cache2 } : undefined;
    gridDataCache[pos2] = cache1 ? { ...cache1 } : undefined;
    if (DEBUG_DIFF) console.log('‚ö° Optimistick√Ω lok√°ln√≠ swap (cache)', pos1, '<->', pos2);
    }

    // --- RYCHL√â LOK√ÅLN√ç SWAP DAT (bez innerHTML kop√≠rov√°n√≠) ---
    function swapBoxDataLocal(p1, p2, gridData){
      const a = gridData[p1] ? { ...gridData[p1] } : null;
      const b = gridData[p2] ? { ...gridData[p2] } : null;
      gridData[p1] = b; gridData[p2] = a;
    }

    // Bezpeƒçn√© naplnƒõn√≠ jednoho boxu (subset render pou≈æ√≠v√°)
    function applySingleBoxData(box, data){
      box.innerHTML = '';
      box.style.backgroundImage = 'none';
      box.style.background = '';
      box.dataset.linkUrl = '';
      box.dataset.linkText = '';
      if (!data) return;
      if (data.hasImage && data.imageUrl){
        box.style.backgroundImage = `url(${data.imageUrl})`;
      } else if (data.hasColor && data.colorStyle){
        box.style.background = data.colorStyle;
      } else if (data.hasText && data.text){
        const span = document.createElement('span');
        span.textContent = data.text; // XSS safe
        span.style.cssText = 'color:#333; font-weight:500; font-size:14px;';
        box.appendChild(span);
        if(!data.colorStyle) box.style.background = 'linear-gradient(135deg,#e3f2fd 0%,#bbdefb 100%)';
      }
      if (data.linkUrl){
        const badge = document.createElement('div');
        badge.className = 'box-link-badge';
        badge.textContent = data.linkText || data.linkUrl;
        badge.dataset.linkUrl = data.linkUrl;
        box.dataset.linkUrl = data.linkUrl;
        box.dataset.linkText = data.linkText || data.linkUrl;
        box.appendChild(badge);
      }
    }

    function renderBoxesSubset(subset){ // subset: { 'r-c': data, ... }
      Object.entries(subset).forEach(([pos, data]) => {
        const box = document.querySelector(`.box[data-position="${pos}"]`);
        if (!box) return;
        applySingleBoxData(box, data);
        if (data) gridDataCache[pos] = { ...data }; else delete gridDataCache[pos];
      });
    }

    // Post-drag integritn√≠ kontrola ‚Äì ovƒõ≈ô√≠, ≈æe lok√°ln√≠ cache odpov√≠d√° serveru (≈ôe≈°√≠ z√°vodn√≠ stavy)
    function schedulePostDragIntegrityCheck(positions){
      if(!gridDocRef) return;
      // Kr√°tk√© zpo≈ædƒõn√≠ ‚Äì d√° prostor Firestore listeneru dodat p≈ô√≠padn√Ω pending snapshot
      setTimeout(async () => {
        try {
          const snap = await window.firebase.getDoc(gridDocRef);
          if(!snap.exists()) return;
          const serverGrid = snap.data().gridData || {};
          const diffs = {};
          const keys = new Set([...Object.keys(serverGrid), ...Object.keys(gridDataCache)]);
          for (const k of keys){
            const a = gridDataCache[k];
            const b = serverGrid[k];
            const aStr = a ? JSON.stringify(a) : '';
            const bStr = b ? JSON.stringify(b) : '';
            if (aStr !== bStr){
              diffs[k] = b || null;
            }
          }
          const diffCount = Object.keys(diffs).length;
          if(diffCount){
            if (DEBUG_DIFF) console.log(`üõ†Ô∏è Integrity diff (${diffCount}) ‚Äì korekce`);
            if (diffCount <= 8){
              renderBoxesSubset(diffs);
            } else {
              renderGridData(serverGrid);
            }
          } else if (DEBUG_DIFF){
            console.log('‚úÖ Integrity OK');
          }
        } catch(e){
          console.warn('‚ö†Ô∏è Integrity check selhala', e);
        }
      }, 120);
    }

    // Throttle dragover pomoc√≠ rAF
    // (rAF throttle odstranƒõn ‚Äì p≈ôechod na dragenter/dragleave)

    function renderWorkspacePanels() {
      const container = document.querySelector('.workspace-panels');
      if (!container) return;
      container.innerHTML = '';
      for (const [id, config] of Object.entries(workspaceConfigs)) {
        const panel = document.createElement('div');
        panel.className = 'workspace-panel';
        panel.dataset.workspace = id;
        panel.title = config.name;
        panel.innerHTML = `
          <div class="workspace-panel-preview">
            ${Array.from({length: 8}).map(() => `<div class="preview-box"></div>`).join('')}
          </div>
          <div class="workspace-panel-name">${config.name}</div>
        `;
        panel.addEventListener('click', () => switchWorkspace(id));
        container.appendChild(panel);
      }
    }

    function showBanner(message, type = 'info', timeout = 3000) {
        const container = document.getElementById('p73-status-banner');
        if (!container) return;
        const div = document.createElement('div');
        div.className = 'p73-banner' + (type === 'error' ? ' error' : '');
        div.textContent = message;
        container.innerHTML = '';
        container.appendChild(div);
        setTimeout(() => {
            if (container.contains(div)) container.removeChild(div);
        }, timeout);
    }

    function updateFirebaseStatus(status, loadTime = null) {
        const statusEl = document.getElementById('firebase-status');
        if (statusEl) statusEl.textContent = status;
        const loadTimeEl = document.getElementById('load-time-display');
        if(loadTimeEl && loadTime !== null){
            loadTimeEl.textContent = `${loadTime} ms`;
        }
    }
    
    function sameBox(a, b){
      if (!a && !b) return true;
      if (!a || !b) return false;
      return (
        !!a.hasImage === !!b.hasImage && (a.imageUrl||'') === (b.imageUrl||'') &&
        !!a.hasText  === !!b.hasText  && (a.text||'')     === (b.text||'') &&
        !!a.hasColor === !!b.hasColor && (a.colorStyle||'')=== (b.colorStyle||'') &&
        (a.linkUrl||'') === (b.linkUrl||'') && (a.linkText||'') === (b.linkText||'')
      );
    }
    function renderGridData(gridData = {}){
      let changed = 0;
      document.querySelectorAll('.box').forEach(box => {
        const pos = box.dataset.position;
        const newData = gridData[pos];
        const oldData = gridDataCache[pos];
        if (sameBox(oldData, newData)) return;
        applySingleBoxData(box, newData);
        if (newData) gridDataCache[pos] = { ...newData }; else delete gridDataCache[pos];
        changed++;
      });
      if (DEBUG_DIFF) console.log('diff changed:', changed);
    }

    function closeDetailPanel() {
        const detailPanel = document.getElementById('detail-panel');
        if (detailPanel.classList.contains('active')) {
            detailPanel.classList.remove('active');
            currentBoxDetails = null;
        }
    }

    async function showBoxDetails(box) {
        const position = box.dataset.position;
        if (!gridDocRef) return;
        
        const snap = await window.firebase.getDoc(gridDocRef);
        if (!snap.exists()) return;

        const gridData = snap.data().gridData || {};
        const boxData = gridData[position] || {};
        currentBoxDetails = { position, data: boxData };

        document.getElementById('box-position').textContent = position;
        const boxPreviewEl = document.getElementById('box-preview');
        // ... (logika pro vyplnƒõn√≠ detail≈Ø z≈Øst√°v√° stejn√°)
        document.getElementById('box-description').value = boxData.description || '';
        document.getElementById('detail-panel').classList.add('active');
    }

    function generateGrid() {
        const gridContainer = document.getElementById('grid-container');
        if (!gridContainer) return;

        for (let r = 1; r <= 7; r++) {
            const row = document.createElement('div');
            row.className = 'row';
            for (let c = 1; c <= 15; c++) {
                const box = document.createElement('div');
                box.className = 'box';
                box.dataset.position = `${r}-${c}`;
                box.setAttribute("draggable", "true");
                row.appendChild(box);
            }
            gridContainer.appendChild(row);
        }
        console.log('‚úÖ Grid HTML generated.');
    }
    
    // =================================================================================
    // --- 4. APLIKAƒåN√ç LOGIKA (WORKFLOWS) ---
    // =================================================================================

    function startTextEdit(box) {
        if (isEditingText) return;

        const docSnapPromise = window.firebase.getDoc(gridDocRef);
        docSnapPromise.then(docSnap => {
            if (!docSnap.exists()) return;
            const gridData = docSnap.data().gridData || {};
            const boxData = gridData[box.dataset.position] || {};
            if (boxData.hasImage) {
                showBanner('Obr√°zek nelze p≈ôejmenovat, pouze text.', 'error');
                return;
            }

            isEditingText = true;
            const currentText = box.querySelector('span')?.textContent || '';
            const input = document.createElement('input');
            input.type = 'text';
            input.value = currentText;
            input.className = 'w-full h-full border-none outline-none bg-white/90 text-center font-sans text-sm p-2 rounded-lg ring-2 ring-blue-500';
            
            box.innerHTML = '';
            box.appendChild(input);
            input.focus();
            input.select();

            const save = async () => {
                if (!isEditingText) return;
                const newText = input.value.trim();
                box.innerHTML = `<span style="color: #333; font-weight: 500; font-size: 14px;">${newText}</span>`;
                isEditingText = false;

                if (newText !== currentText) {
                    await updateBoxDataInFirestore(box.dataset.position, { hasText: true, text: newText, hasImage: false });
                }
            };
            
            input.addEventListener('blur', save);
            input.addEventListener('keydown', e => {
                if (e.key === 'Enter') input.blur();
                if (e.key === 'Escape') {
                    isEditingText = false;
                    box.innerHTML = `<span style="color: #333; font-weight: 500; font-size: 14px;">${currentText}</span>`;
                }
            });
        });
    }

    async function handleNavAction(action, position) {
        const box = document.querySelector(`[data-position="${position}"]`);
        if (!box) return;

        switch(action) {
            case 'rename':
                startTextEdit(box);
                break;
            case 'link':
                const url = prompt('Zadejte URL adresu:', 'https://');
                if (url) {
                    await updateBoxDataInFirestore(position, { linkUrl: url, linkText: url.split('/')[2] });
                }
                break;
            case 'color':
                const colors = ['#e0f2fe', '#fce7f3', '#dcfce7', '#fef3c7'];
                const randomColor = colors[Math.floor(Math.random() * colors.length)];
                await updateBoxDataInFirestore(position, { hasColor: true, colorStyle: randomColor, hasImage: false, hasText: false });
                break;
            case 'delete':
        // Okam≈æit√© smaz√°n√≠ bez potvrzen√≠ + archivace pro obnovu
        await archiveAndDeleteBox(position);
                break;
        }
    }


    async function handleAddNewProject() {
      const projectName = prompt("Zadejte n√°zev nov√©ho projektu:", "Nov√Ω projekt");
      if (!projectName || projectName.trim() === '') {
        showBanner("N√°zev projektu nem≈Ø≈æe b√Ωt pr√°zdn√Ω.", "error");
        return;
      }

      document.getElementById('workspace-loading').classList.add('active');
      
      const newWorkspaceId = `ws_${Date.now()}`;
      const newCollectionName = `project73_${newWorkspaceId}`;

      workspaceConfigs[newWorkspaceId] = {
        name: projectName,
        collection: newCollectionName
      };

      try {
        await window.firebase.updateDoc(userWorkspacesDocRef, {
          workspaces: workspaceConfigs
        });
        
        renderWorkspacePanels();
        await switchWorkspace(newWorkspaceId);

        showBanner(`Projekt "${projectName}" byl √∫spƒõ≈°nƒõ vytvo≈ôen.`, 'info');

      } catch (error) {
        console.error("‚ùå Error creating new project:", error);
        showBanner("Nepoda≈ôilo se vytvo≈ôit nov√Ω projekt.", "error");
        delete workspaceConfigs[newWorkspaceId];
      } finally {
        document.getElementById('workspace-loading').classList.remove('active');
      }
    }

    async function initializeWorkspace(workspaceId) {
        const config = workspaceConfigs[workspaceId];
        if (!config) {
          console.error(`‚ùå Workspace with id ${workspaceId} not found in config.`);
          showBanner("Chyba: Pracovn√≠ plocha nenalezena.", "error");
          return;
        }
        const fingerprint = getBrowserFingerprint();
        
        console.log(`üîç Initializing workspace ${workspaceId}`);
        
        let session = await findSessionByFingerprint(fingerprint, config.collection);

        if (session) {
            config.sessionId = session.id;
            config.gridDocRef = window.firebase.doc(window.firebase.db, config.collection, session.id);
            console.log(`‚úÖ Found existing session for ${workspaceId}:`, session.id);
        } else {
            const newSession = await createNewSession(workspaceId);
            config.sessionId = newSession.sessionId;
            config.gridDocRef = newSession.gridDocRef;
        }
    }

    async function switchWorkspace(workspaceId) {
        if (workspaceId === currentWorkspace || !isFirebaseReady) return;

        console.log(`üîÑ Switching to workspace ${workspaceId}`);
        document.getElementById('workspace-loading').classList.add('active');
        const startTime = performance.now();
        
        currentWorkspace = workspaceId;
        const config = workspaceConfigs[currentWorkspace];

        if (!config.gridDocRef) {
            await initializeWorkspace(currentWorkspace);
        }

        sessionId = config.sessionId;
        gridDocRef = config.gridDocRef;
        document.getElementById('session-id-display').textContent = sessionId ? `${sessionId.substring(0, 12)}...` : 'N/A';

        const snap = await window.firebase.getDoc(gridDocRef);
        const endTime = performance.now();
        const loadTime = Math.round(endTime - startTime);

        if (snap.exists()) {
            renderGridData(snap.data().gridData);
        }

        document.querySelectorAll('.workspace-panel').forEach(p => p.classList.remove('active'));
        const activePanel = document.querySelector(`.workspace-panel[data-workspace="${workspaceId}"]`);
        if (activePanel) activePanel.classList.add('active');
        
        setupRealtimeListener();
        
        showBanner(`P≈ôepnuto na ${config.name}`, 'info');
        document.getElementById('workspace-loading').classList.remove('active');
        updateFirebaseStatus('Ready', loadTime);
    }
    
    function setupRealtimeListener() {
      if (_rtUnsub) { _rtUnsub(); _rtUnsub = null; }
      if (!gridDocRef) return;
      _rtUnsub = window.firebase.onSnapshot(gridDocRef, (snap) => {
        if (!snap.exists()) return;
        if (!dragSource) {
          renderGridData(snap.data().gridData);
        } else {
          // Ignorujeme realtime bƒõhem drag pro absolutn√≠ plynulost
        }
      }, (err) => console.error('‚ùå onSnapshot error:', err));
    }

    async function loadUserWorkspaces() {
        const { db, doc, getDoc, setDoc } = window.firebase;
        userWorkspacesDocRef = doc(db, 'project73_users', currentUser.uid);

        try {
            const docSnap = await getDoc(userWorkspacesDocRef);
            if (docSnap.exists() && docSnap.data().workspaces) {
                workspaceConfigs = docSnap.data().workspaces;
                console.log('‚úÖ User workspaces loaded from Firestore.');
            } else {
                console.log('‚ÑπÔ∏è No workspace config found for user, creating default.');
                workspaceConfigs = getDefaultWorkspaces();
                await setDoc(userWorkspacesDocRef, { workspaces: workspaceConfigs });
            }
        } catch (error) {
            console.error("‚ùå Error loading user workspaces:", error);
            showBanner("Chyba p≈ôi naƒç√≠t√°n√≠ projekt≈Ø.", "error");
            workspaceConfigs = getDefaultWorkspaces();
        }
        renderWorkspacePanels();
    }

    async function onUserSignedIn(user) {
        currentUser = user;
        console.log('‚úÖ User signed in:', user.uid);
        const startTime = performance.now();

        await loadUserWorkspaces();
        
        currentWorkspace = 'workspace1';
        await initializeWorkspace(currentWorkspace);
        
        const config = workspaceConfigs[currentWorkspace];
        if (config && config.gridDocRef) {
          sessionId = config.sessionId;
          gridDocRef = config.gridDocRef;
          document.getElementById('session-id-display').textContent = sessionId ? `${sessionId.substring(0, 12)}...` : 'N/A';

          const snap = await window.firebase.getDoc(gridDocRef);
          const endTime = performance.now();
          const loadTime = Math.round(endTime - startTime);

          if (snap.exists()) {
              renderGridData(snap.data().gridData);
          }
          
          setupRealtimeListener();
          isFirebaseReady = true;
          updateFirebaseStatus('Ready', loadTime);
          processUploadQueue();

          const activePanel = document.querySelector(`.workspace-panel[data-workspace="${currentWorkspace}"]`);
          if (activePanel) activePanel.classList.add('active');

        } else {
          console.error("Failed to initialize workspace config properly.");
          showBanner("Nepoda≈ôilo se inicializovat pracovn√≠ plochu.", "error");
        }
        // Naƒçten√≠ archivn√≠ch z√°znam≈Ø po inicializaci workspace
        loadArchiveList();
        initDeferredTasksListener();
    }

    // =================================================================================
    // --- 5. INICIALIZACE APLIKACE A EVENT LISTENERY ---
    // =================================================================================
  async function handleGridInteraction(event) {
        const targetBox = event.target.closest('.box');
        if (!targetBox) return;

        if (event.type === 'click' && (event.metaKey || event.ctrlKey)) {
            event.preventDefault();
            const navIcons = document.getElementById('nav-icons');
            const rect = targetBox.getBoundingClientRect();
            navIcons.style.top = `${rect.top + window.scrollY - navIcons.offsetHeight - 10}px`;
            navIcons.style.left = `${rect.left + window.scrollX + rect.width / 2 - navIcons.offsetWidth / 2}px`;
            navIcons.dataset.position = targetBox.dataset.position;
            navIcons.classList.add('active');
      startNavIconsAutohide();
            return;
        }

        switch (event.type) {
            case 'mouseenter': activeBox = targetBox; break;
            case 'mouseleave': 
                if (!isEditingText) activeBox = null;
                break;
            case 'dblclick': 
                if (!isEditingText && boxHasContent(targetBox)) { // Detail jen pokud je obsah
                    showBoxDetails(targetBox);
                }
                break;
      case 'dragstart':
                if (!boxHasContent(targetBox)) {
                    event.preventDefault();
                    return;
                }
        document.body.classList.add('dnd-active');
        if (_rtUnsub) { _rtUnsub(); _rtUnsub = null; } // √∫pln√© vypnut√≠ realtime
                dragSource = targetBox;
                event.dataTransfer.effectAllowed = "move";
                event.dataTransfer.setData("text/plain", targetBox.dataset.position);

                // --- OPTIMALIZACE: Pou≈æijeme vlastn√≠, lehk√Ω n√°hled ---
                const dragPreview = document.getElementById('drag-preview');
                if (dragPreview) {
                    const boxTextSpan = targetBox.querySelector('span');
                    if (boxTextSpan && boxTextSpan.textContent) {
                        dragPreview.textContent = boxTextSpan.textContent.substring(0, 25) + (boxTextSpan.textContent.length > 25 ? '...' : '');
                    } else if (targetBox.style.backgroundImage) {
                        dragPreview.textContent = `Obr√°zek (${targetBox.dataset.position})`;
                    } else {
                        dragPreview.textContent = `Box ${targetBox.dataset.position}`;
                    }
                    // Nastav√≠ vlastn√≠ n√°hled a centruje ho na kurzor
                    event.dataTransfer.setDragImage(dragPreview, dragPreview.offsetWidth / 2, dragPreview.offsetHeight / 2);
                }
                
                // Skryjeme origin√°ln√≠ prvek (a≈æ po vytvo≈ôen√≠ n√°hledu)
                setTimeout(() => {
                    targetBox.classList.add("dragging");
                }, 0);
                break;
            case 'dragenter':
                if (targetBox !== dragSource) {
                  if (lastDragOverEl && lastDragOverEl !== targetBox) lastDragOverEl.classList.remove('dragover');
                  targetBox.classList.add('dragover');
                  lastDragOverEl = targetBox;
                }
                break;
            case 'dragover':
                event.preventDefault();
                break;
            case 'dragleave': 
                targetBox.classList.remove("dragover"); 
                break;
            case 'drop':
                event.preventDefault();
                targetBox.classList.remove("dragover");
                if (dragSource && dragSource !== targetBox) {
                  const p1 = dragSource.dataset.position;
                  const p2 = targetBox.dataset.position;
                  const newCache = { ...gridDataCache };
                  swapBoxDataLocal(p1, p2, newCache);
                  renderBoxesSubset({ [p1]: newCache[p1], [p2]: newCache[p2] });
                  gridDataCache = newCache;
                  lastDragSwapPositions = [p1, p2];
                  swapBoxDataInFirestore(p1, p2);
                }
                break;
            case 'dragend':
                // Vyƒçist√≠me v≈°echny doƒçasn√© t≈ô√≠dy
                document.querySelectorAll('.box').forEach(b => {
                    b.classList.remove('dragging', 'dragover');
                });
        document.body.classList.remove('dnd-active');
        lastDragOverEl = null;
        dragSource = null;
        setupRealtimeListener(); // znovu p≈ôipojit realtime
        // Jednor√°zov√Ω refresh nav√≠c
        try {
          const snap = await window.firebase.getDoc(gridDocRef);
          if (snap.exists()) renderGridData(snap.data().gridData);
        } catch(e) {}
        schedulePostDragIntegrityCheck(lastDragSwapPositions);
                break;
        }
    }

    function initializeEventListeners() {
      const gridContainer = document.getElementById('grid-container');
      if (gridContainer) {
          ['mouseenter', 'mouseleave', 'dblclick', 'dragstart', 'dragenter', 'dragover', 'dragleave', 'drop', 'dragend', 'click'].forEach(eventType => {
              gridContainer.addEventListener(eventType, handleGridInteraction, ['mouseenter', 'mouseleave', 'dragover', 'dragleave'].includes(eventType));
          });
          console.log('‚úÖ Event delegation for grid initialized.');
      }

      document.getElementById('sidebar-toggle').addEventListener('click', () => {
          document.getElementById('sidebar').classList.toggle('active');
          document.getElementById('sidebar-toggle').classList.toggle('active');
      });

      document.getElementById('add-workspace-btn').addEventListener('click', handleAddNewProject);
      
      document.querySelector('.detail-panel-close').addEventListener('click', closeDetailPanel);
      
      document.getElementById('save-description').addEventListener('click', async () => {
        if (!currentBoxDetails) return;
        const description = document.getElementById('box-description').value;
        await updateBoxDataInFirestore(currentBoxDetails.position, { description });
        showBanner('Popis ulo≈æen.', 'info');
      });
      
      document.addEventListener('paste', async (event) => {
        if (!activeBox || !isFirebaseReady) return;
        
        const items = (event.clipboardData || window.clipboardData).items;
        const imageItem = [...items].find(i => i.type.includes('image'));
        if (!imageItem) return;
        
        event.preventDefault();
      const blob = imageItem.getAsFile();
        const position = activeBox.dataset.position;

        const reader = new FileReader();
        reader.onload = (e) => {
            const localUrl = e.target.result;
            activeBox.style.backgroundImage = `url(${localUrl})`;
            activeBox.innerHTML = '';
        // Komprese obr√°zku p≈ôed za≈ôazen√≠m do fronty (sn√≠≈æ√≠ velikost z 10MB+ na stovky KB)
        compressImageIfNeeded(blob, { maxWidth: 1600, maxHeight: 1600, quality: 0.82 })
          .then(compressed => {
            uploadQueue.push({ blob: compressed, position, localUrl });
            processUploadQueue();
          })
          .catch(err => {
            console.warn('‚ö†Ô∏è Komprese selhala, pos√≠l√°m origin√°l', err);
            uploadQueue.push({ blob, position, localUrl });
            processUploadQueue();
          });
        };
        reader.readAsDataURL(blob);
      });

      document.addEventListener('click', (e) => {
          const target = e.target;
          const box = target.closest('.box');
          if (box) {
              activeBox = box;
          }

          const detailPanel = document.getElementById('detail-panel');
          // Pokud je panel aktivn√≠ a klik je mimo nƒõj:
          // - klik na jin√Ω box => otev≈ôi rovnou detail nov√©ho boxu
          // - klik mimo jak√Ωkoli box => zav≈ôi panel
          if (detailPanel.classList.contains('active') && !detailPanel.contains(target)) {
            if (box && boxHasContent(box)) {
              showBoxDetails(box); // p≈ôepnut√≠ detailu ‚Äì jen pokud je obsah
            } else {
              closeDetailPanel(); // pr√°zdn√Ω box nebo klik mimo -> zav≈ô√≠t
            }
          }

          // Zav√≠r√°n√≠ li≈°ty n√°stroj≈Ø (nav-icons) p≈ôi kliknut√≠ mimo ni
          const navIconsEl = document.getElementById('nav-icons');
          if (navIconsEl.classList.contains('active') && !navIconsEl.contains(target)) {
            // Pokud jde o command/ctrl click na box, nech√°me grid handler nav-icons obnovit
            if (!(e.metaKey || e.ctrlKey)) {
              navIconsEl.classList.remove('active');
              cancelNavIconsAutohide();
            }
          }
        
          const navIcons = document.getElementById('nav-icons');
          if (navIcons.classList.contains('active') && !navIcons.contains(target) && !box) {
              navIcons.classList.remove('active');
              cancelNavIconsAutohide();
          }
      });
      
      const clearBtn = document.getElementById('clear-workspace-btn');
      if (clearBtn) {
        clearBtn.addEventListener('click', async () => {
          if (!isFirebaseReady || !gridDocRef) {
            showBanner('Firebase je≈°tƒõ nen√≠ p≈ôipraven.', 'error');
            return;
          }
          if (confirm('Opravdu vyƒçistit v≈°echny boxy t√©to pracovn√≠ plochy?')) {
            await clearCurrentWorkspace();
          }
        });
      }

      document.addEventListener('keydown', (e) => {
          if (e.key === 'Delete' || e.key === 'Backspace') {
              if (activeBox && !isEditingText) {
                  e.preventDefault();
                  handleNavAction('delete', activeBox.dataset.position);
              }
          }
          if (e.key === 'Escape') {
            document.getElementById('nav-icons').classList.remove('active');
      closeDetailPanel(); // ESC tak√© zav≈ôe panel
    cancelNavIconsAutohide();
          }
      });
      
      document.getElementById('nav-icons').addEventListener('click', (e) => {
        const navIcon = e.target.closest('.nav-icon');
        if (navIcon) {
            const action = navIcon.dataset.action;
            const position = document.getElementById('nav-icons').dataset.position;
            handleNavAction(action, position);
            document.getElementById('nav-icons').classList.remove('active');
    cancelNavIconsAutohide();
        }
      });
  // Interakce s li≈°tou resetuj√≠ / obnovuj√≠ autohide
  const navIconsPersistentEl = document.getElementById('nav-icons');
  navIconsPersistentEl.addEventListener('mouseenter', () => cancelNavIconsAutohide());
  navIconsPersistentEl.addEventListener('mousemove', () => startNavIconsAutohide());
  navIconsPersistentEl.addEventListener('mouseleave', () => startNavIconsAutohide());

      // Archiv ‚Äì refresh tlaƒç√≠tko
      const archiveRefreshBtn = document.getElementById('archive-refresh');
      if (archiveRefreshBtn){
        archiveRefreshBtn.addEventListener('click', () => loadArchiveList());
      }

      // Delegace pro obnovu archivovan√Ωch polo≈æek
      const archiveSection = document.getElementById('archive-section');
      if (archiveSection){
        archiveSection.addEventListener('click', (e) => {
          const btn = e.target.closest('.restore-btn');
          if (btn){
            const docId = btn.dataset.doc;
            const pos = btn.dataset.pos;
            restoreArchivedBox(docId, pos);
          }
        });
      }

      // Deferred tasks events
      const deferredSaveBtn = document.getElementById('deferred-save');
      const deferredTitleInput = document.getElementById('deferred-title');
      if (deferredSaveBtn && deferredTitleInput){
        deferredSaveBtn.addEventListener('click', async () => {
          const title = deferredTitleInput.value.trim();
          if (!title) return;
            await addDeferredTask(title);
            deferredTitleInput.value = '';
        });
        deferredTitleInput.addEventListener('keydown', async (e) => {
          if (e.key === 'Enter') {
            const title = deferredTitleInput.value.trim();
            if (!title) return;
            await addDeferredTask(title);
            deferredTitleInput.value = '';
          }
        });
      }

      const deferredList = document.getElementById('deferred-list');
      if (deferredList){
        deferredList.addEventListener('click', (e) => {
          const toggleBtn = e.target.closest('[data-task-toggle]');
          if (toggleBtn){
            const id = toggleBtn.dataset.taskToggle;
            const parent = toggleBtn.parentElement;
            const isDone = parent.querySelector('div.flex-1')?.classList.contains('line-through');
            toggleDeferredTask(id, isDone ? 'done' : 'open');
          }
          const dropBtn = e.target.closest('[data-task-drop]');
          if (dropBtn){
            const id = dropBtn.dataset.dropTask;
            dropDeferredTask(id);
          }
        });
      }
    }

    document.addEventListener('DOMContentLoaded', () => {
        console.log('üöÄ DOM loaded, initializing app...');
        generateGrid();
        initializeEventListeners();

        const { auth, onAuthStateChanged, signInAnonymously } = window.firebase;
        onAuthStateChanged(auth, (user) => {
            if (user) {
                onUserSignedIn(user);
            } else {
                signInAnonymously(auth).catch(err => console.error("Anonymous sign-in failed:", err));
            }
        });
    });

    async function clearCurrentWorkspace() {
        if (!gridDocRef) return;
        try {
          const snap = await window.firebase.getDoc(gridDocRef);
          if (!snap.exists()) return;
          const data = snap.data();
          const currentGrid = data.gridData || {};
          const hasAny = Object.keys(currentGrid).length > 0;
          if (!hasAny) {
            showBanner('Pracovn√≠ plocha je u≈æ pr√°zdn√°.', 'info');
            return;
          }
          await window.firebase.updateDoc(gridDocRef, {
            gridData: {},
            'stats.filledBoxes': 0,
            'stats.emptyBoxes': 105,
            lastModified: window.firebase.serverTimestamp()
          });
          renderGridData({});
          showBanner('Plocha vyƒçi≈°tƒõna.', 'info');
        } catch (e) {
          console.error('‚ùå clearCurrentWorkspace error', e);
          showBanner('Chyba p≈ôi ƒçi≈°tƒõn√≠.', 'error');
        }
      }
  </script>
</body>
</html>